
Slide 1
I am SZ, still doing part-time PhD in Music Composition at Goldsmiths Uni of London with Roger Redgate and Michael Zbysynski (Patricia Alessandrini)
Today I will be talking about comprovisation strategies in ZScore (networked composition/performance)  


Slide 2
In the first part I will talk about comprovisation and how computer networks can be utilised for comprovised music-making.
I will examine the comprovisation decision making process, notational perspective in a dynamic event-driven systems as well as compositional and technical challenges in a networked environment.

In the second part I will be talking about dynamic notation strategies in ZScore, a requirement for multiple notation representations per participant type and possibilities for a performance control democratisation in real-time event-driven systems. 

I will also try to show a ZScore demo.


Slide 3 
When I first heard the word 'comprovisation', a while ago, I assumed it was related to computer improvisation. So, I imagined a bunch of computers improvising with each other. I was slightly disappointed to learn that it is a combination of words composition and improvisation.

Comprovisation - a combination of composed and improvised music-making

Composition - traditionally defines a role of a composer who creates a written score, predetermined before a performance (repeatable)
Improvisation - unplanned, spontaneous performance (not repeatable)

However, in practice, none of the idealised definitions is entirely true.

No score contains all necessary information required for the realisation of a piece of music. It does not contain notation of all performance parameters (e.g. string bow speed or pressure). The score omits information that is ubiquitous, verbose or too difficult to notate.
Likewise, free improvisation is not entirely spontaneous. Depends on years of learning techniques, performance experience and context.

It is enough to hear different recordings of the same classical score to conclude that they are not identical.
Likewise, it is enough to hear several performances of the same free improvisers to conclude that they are not always completely different.


Slide 4
It could be said that all music-making is a result of a decision-making process.
A decision-making spectrum can be defined by observing who makes these decisions and when.

In Composed music a the Composer makes most of the decisions before a performance and writes them down in a form of a static music score.
In improvised music performers make decisions in real-time continuously by assessing current output form themselves and other performers.

Networked technology is enabler for turning of the dial left of right
I am Interested in the middle ground


Slide 5
Event-driven network performance system enables of a number of heterogeneous components to exchange data and events in real-time.
Any participant can be data consumer and producer.
The system can be designed as a client-server configuration where all logic is on the server side or as a distributed system where logic can be processed in multiple locations. 

Existing software InScore, MaxScore, Bach, Comprovisador, Drawsocket etc.


Slide 6
Score becomes more than a static notation, it can include dynamic elements such as algorithms and real-time event handling Composition can include both static elements and dynamic system behaviour model as well as what events can happen and at what time.

Events can be scheduled so that they always happen at a certain time or be triggered by a participant at any allowed time.
Networking technology allows for multi tempo event scheduling. Participant groups can be assigned different transport objects (clocks).  
Event timing can be expressed relative to the performance start (linear composition) or relative to another point/event in the past (nonlinear composition). 

If a composition involves human performers then there are timing restrictions on when certain events can happen. 
e.g. Performers need enough preparation time to perceive what to play next.

The notation itself can be nondeterministic and therefore become a contingent element in a performance.


Slide 7
Technically, heterogeneous clients might require different network transports and API implementations.
Different participant types require different score representations.
E.g. musicians need to see clearly laid out notation and actions they can take at any point of time
Conductor needs performance admin controls (start/stop/tempo ...)
Composer needs to be able to modify performance parameters/notation in real-time.
Audience can be shown a graphical representation of the score with any required textual information.

Participants can be assigned multiple agency.
eg. Audience can trigger events that impact composition flow, produce sound directly or their mobile devices can be used as sound source.

This environment blurs boundaries between traditional roles: composer/conductor/performer/audience
Allows for active participation for all, akin to ancient communal music-making (musicking)


Slide 8
Networked composition and performance presents multiple challenges that can be divided into technical, practical and aesthetic.
The most notable is a composition complexity as it requires multiple representations and system behaviour modelling

Better easy to use tools are required for mass adoption.



Slide 9
ZScore is a networked notation system for mixed ensemble composition and performance.
Mixture of third-party and proprietary software.



Slide 10
ZScore uses alternating pane notation strategy for musicians' front ends.
In this configuration the notation is not moving and is read traditionally left-to-right and top-to-bottom
Current position indicator moves to show current position. It also indicates current tempo with bouncing ball. 
At any point of time during a performance, there is always one active and one preparatory pane. 
A content of each pane defines a 'page' of music.

A time window is defined when the next pane can be updated with the upcoming notation.

Actions that musicians can perform are displayed below notation.


Slide 11
In order to facilitate dynamic notation ZScore's notation layout uses vertical separation of playing techniques.
Each dynamic performance parameter has dedicated 2-dimensional space where Y = time and Y = parameter range.

Optimal layout was determined after user trials, for example, musicians expressed preference to have dynamics indicators below the pitch notation rather than at different places within the layout. 

Previous versions used free layout where only parameters required at a particular time were notate, which was more optimal from spatial utilisation perspective.  

Here we can see strings notation and separation of left and right hand playing parameters.
 

Slide 12
The purpose of vertical parameter separation was to enable dynamic notation overlays.

Overlays cover entire 2-dimensional space of dedicated to the performance parameter.
Current dynamic parameter value is visualised with horizontal line and overlay colour.

Dynamic parameter value can be controlled in real-time remotely by the composer/conductor or by an algorithm.

Here we can see the same notation excerpt in different overlay configurations.


Slide 13
This is the control front end written in JavaFX which allows for the control of 
Current position, Tempo, Dynamic overlays, Randomisation strategy, Participant selection

All changes are distributed in real-time to all participants

Dynamic overlays have musical value ranges for easier use


Slide 14
One of the available dynamic notation strategies is score randomisation.
This strategy randomises what notation (page) and what instrumentation should be used in the next time window.
Randomisation ranges are defined in the strategy configuration (yaml)

Configuration  
‘2’ - two randomly selected instruments play the same randomly selected page
‘2,1’ - two instruments play the same page, one instrument plays another random page
‘1,1,1,1’ - four instruments play different randomly selected page


Slide 15
ZScore allows for scripting embedded directly into the score.

Each script has associated execution time (beat) and destination

Currently available destination types:
Server side javascript (nashorn)
Client side javascript (web)
OSC (INScore, MAX)


Slide 16
ZScore server contains embedded HTTP server (Undertow) which allows for web client connectivity
The server currently supports websockets, SSE (server side events) and HTTP client polling.
Client side implementation consists of proprietary and third-party javascript libraries.
Gsap library is used for animation and timed actions. 
Web audio and speech apis are used for client side sound production. 

The example shows audience score representation where user can select next notation page to be played in the next time window


Slide 17
A MAX client was created as Java external and JSUI component
It processes OSC messaged defined in the score and distributes them to named MAX objects

A set of generic max components was developed for ZScore performances
